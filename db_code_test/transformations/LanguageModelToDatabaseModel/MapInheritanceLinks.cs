using System;
using Deveel.Math;

namespace db_code_test
{
	public partial class AbstractModelToDatabaseModel
	{
		public readonly ColumnType KeyType = new ColumnType(null, "KEY", "// generated by compiler");
		public static readonly string ClassifierDescColumn = "child_table_name";
		public static readonly string ChildRefName = "Inheritance";

		/// <summary>
		/// Create tables, one for each class
		/// </summary>
		/// <param name="sourceModel">Source model.</param>
		/// <param name="destModel">Destination model.</param>
		public void MapInheritanceLinks (LanguageModel sourceModel, Schema destModel)
		{
			foreach (var child in sourceModel.Classes)
			{
				var parents = child.InheritanceSpecification;
				foreach (var parent in parents)
				{
					ProcessInheritanceLink(destModel, child, parent);
				}
			}
		}

		/// <remarks>
		/// Creates a common table for parent class with type field and classifier table
		/// </remarks>
		public void ProcessInheritanceLink (Schema destModel, ClassDef child, ClassDef parent)
		{
			Table childTable = destModel.GetTable(child.TableName);
			Table parentTable = destModel.GetTable(parent.TableName);
			Table classifierTable;
			// create classifier if it was not created earlier
			string classifierTableName = parentTable.Name + "_types";
			if (parentTable.ContainColumn(classifierTableName + "_fk"))
			{
				classifierTable = destModel.GetTable(parentTable.Name + "_types");
			}
			else
			{
				// create column
				Column classifierRefColumn = parentTable.CreateColumn(classifierTableName + "_fk", KeyType);
				// create table
				classifierTable = destModel.CreateTable(classifierTableName);
				Column pk = classifierTable.CreateColumn(classifierTableName + "_pk", KeyType);
				var ctct = new ColumnType (null, "STRING");
				classifierTable.CreateColumn(ClassifierDescColumn, ctct);
				// create link (=constraint) from parent to classifier
				destModel.CreateLink(classifierRefColumn, pk);
			}
			// create link (=constraint) from child to parent
			var typeLinkOneSide = parentTable.GetColumn (parentTable.Name + "_pk");
			var typeLinkManySide = childTable.CreateColumn(parentTable.Name + "_fk", KeyType);
			destModel.CreateLink(typeLinkManySide, typeLinkOneSide);
			// insert row into classifier
			var row = classifierTable.CreateRow();
			row [ClassifierDescColumn].Value = childTable.Name;
		}

		/// <remarks>
		/// Copies fields for parent class into each descendant and creates antother classifier table
		/// </remarks>
		public void ProcessInheritanceLinkSplitted (Schema destModel, ClassDef child, ClassDef parent)
		{
			Table childTable = destModel.GetTable(child.TableName);
			Table parentTable = destModel.GetTable(parent.TableName);
			Table classifierTable;
			// create classifier if it was not created earlier
			string classifierTableName = parentTable.Name + "_types";
			if (parentTable.ContainColumn(classifierTableName + "_fk"))
			{
				classifierTable = destModel.GetTable(parentTable.Name + "_types");
			}
			else
			{
				// create column
				Column classifierRefColumn = parentTable.CreateColumn(classifierTableName + "_fk", KeyType);
				// create table
				classifierTable = destModel.CreateTable(classifierTableName);
				Column pk = classifierTable.CreateColumn(classifierTableName + "_pk", KeyType);
				var ctct = new ColumnType (null, "STRING");
				classifierTable.CreateColumn(ClassifierDescColumn, ctct);
				// create link (=constraint) from parent to classifier
				destModel.CreateLink(classifierRefColumn, pk);
			}
			// create link (=constraint) from child to parent
			var typeLinkOneSide = parentTable.GetColumn (parentTable.Name + "_pk");
			var typeLinkManySide = childTable.CreateColumn(parentTable.Name + "_fk", KeyType);
			destModel.CreateLink(typeLinkManySide, typeLinkOneSide);
			// insert row into classifier
			var row = classifierTable.CreateRow();
			row [ClassifierDescColumn].Value = childTable.Name;
		}
	}
}
